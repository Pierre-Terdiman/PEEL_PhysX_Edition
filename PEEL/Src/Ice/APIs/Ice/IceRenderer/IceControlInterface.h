///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains a control interface.
 *	\file		IceControlInterface.h
 *	\author		Pierre Terdiman
 *	\date		January, 17, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef ICECONTROLINTERFACE_H
#define ICECONTROLINTERFACE_H

	class ICERENDERER_API ControlInterface : public IceInterface
	{
		public:
		//! Constructor
								ControlInterface()	{}
		//! Destructor
		virtual					~ControlInterface()	{}

						DECLARE_ICE_INTERFACE(ControlInterface, IceInterface)

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Gets type of objects the interface can work with.
		 *	\return		type of supported objects
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual	const	char*	GetControlledType		()		const									= 0;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Selection callback.
		 *	\param		controlled	[in] controlled object, or null
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	OnSelection				(Cell* controlled=null)							{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Deselection callback.
		 *	\param		controlled	[in] controlled object, or null
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	OnDeselection			(Cell* controlled=null)							{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Render callback.
		 *	\param		renderer	[in] current renderer
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	Render					(Renderer* renderer, Cell* controlled)			{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Update callback.
		 *	\param		time		[in] time-related info
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	Update					(const TimeInfo& time, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse left down callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	LeftDownCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse middle down callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	MiddleDownCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse right down callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	RightDownCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse left drag callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	LeftDragCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse middle drag callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	MiddleDragCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse right drag callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	RightDragCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse left up callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	LeftUpCallback			(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse middle up callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	MiddleUpCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse right up callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	RightUpCallback			(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse left double-click callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	LeftDblClkCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse middle double-click callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	MiddleDblClkCallback	(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse right double-click callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	RightDblClkCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse motion callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	MouseMoveCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Mouse wheel callback.
		 *	\param		mouse		[in] current mouse data
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	MouseWheelCallback		(const MouseInfo& mouse, Cell* controlled)		{ return false;		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Key down callback.
		 *	\param		key			[in] code for pressed key
		 *	\param		controlled	[in] controlled object
		 *	\return		true if the method has been overridden
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool	KeyDownCallback			(udword key, Cell* controlled)					{ return false;		}
	};

	FUNCTION ICERENDERER_API ControlInterface* FindControlInterface(Cell* controlled);

#endif // ICECONTROLINTERFACE_H