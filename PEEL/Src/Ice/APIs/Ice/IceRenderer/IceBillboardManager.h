///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains a billboard manager.
 *	\file		IceBillboardManager.h
 *	\author		Pierre Terdiman
 *	\date		April, 14, 2003
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef ICEBILLBOARDMANAGER_H
#define ICEBILLBOARDMANAGER_H

	enum BillboardFlag
	{
		BBF_DISABLED	= (1<<0),	//!< If set, billboard is not rendered
	};

	class ICERENDERER_API Billboard : public Allocateable
	{
		public:

		inline_					Billboard() : mFlags(0)																							{}
		inline_					Billboard(const Point& p, float s, float d, udword c) : mPos(p), mSize(s), mDeadLine(d), mColor(c), mFlags(0)	{}
		inline_					~Billboard()																									{}

				Point			mPos;
				float			mSize;
				float			mDeadLine;
				udword			mColor;
				udword			mFlags;
	};

	#define TEMPLATED_MANAGER		BillboardHandleManager
	#define TEMPLATED_OBJECT		Billboard
	#define	TEMPLATED_EXPORT		ICERENDERER_API
	#include <IceCore\IceHandleManagerTemplateDef.h>

	class ICERENDERER_API BillboardManager : public Allocateable
	{
		public:
								BillboardManager();
								~BillboardManager();

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Adds a billboard to the manager.
		 *	\param		object	[in] new billboard object
		 *	\return		index of new billboard
		 *	\warning	you can only use returned index safely with permanent billboards!
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				udword			AddBillboard(const Billboard& object);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Removes a billboard from the manager.
		 *	\param		i	[in] index of billboard object
		 *	\warning	you can only use this safely with permanent billboards!
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				void			RemoveBillboard(udword i);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Renders all billboards.
		 *	\param		rd			[in] renderer
		 *	\param		global_time	[in] current global time. Use default param for permanent (non-fading) billboards.
		 *	\param		fade_length	[in] length of fade for all billboards
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				bool			Render(Renderer* rd, float global_time=0.0f, float fade_length=0.0f);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Sorts all billboards.
		 *	\param		dir			[in] sorting axis
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				void			Sort(const Point& dir);

		inline_	void			SetWorldMatrix(const Matrix4x4& world_matrix)	{ mWorld = world_matrix;	mIdentity = mWorld.IsIdentity();	}

		// Handle with care
				Billboard*		GetBillboard(udword i);
		private:
				AxisSortHelper	mAxisSortHelper;
				Matrix4x4		mWorld;
				BOOL			mIdentity;
				udword			mVertexOffset;
				VertexBuffer*	mVB;
		// 
				BillboardHandleManager	mBHM;

		// Internal methods
				void			Release();
	};

	class ICERENDERER_API FXQuad : public Allocateable
	{
		public:

		inline_					FXQuad()				: mFlags(0)																{}
		inline_					FXQuad(	const Point& p0,
										const Point& p1,
										const Point& p2,
										const Point& p3,
										float deadline) : mP0(p0), mP1(p1), mP2(p2), mP3(p3), mDeadLine(deadline), mFlags(0)	{}
		inline_					~FXQuad()																						{}

				Point			mP0, mP1, mP2, mP3;
				float			mDeadLine;
				udword			mFlags;
	};

	#define TEMPLATED_MANAGER		FXQuadHandleManager
	#define TEMPLATED_OBJECT		FXQuad
	#define	TEMPLATED_EXPORT		ICERENDERER_API
	#include <IceCore\IceHandleManagerTemplateDef.h>

	class ICERENDERER_API FXQuadManager : public Allocateable
	{
		public:
								FXQuadManager();
								~FXQuadManager();

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Adds a quad to the manager.
		 *	\param		object	[in] new quad object
		 *	\return		index of new quad
		 *	\warning	you can only use returned index safely with permanent quads!
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				udword			AddFXQuad(const FXQuad& object);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Removes a quad from the manager.
		 *	\param		i	[in] index of quad object
		 *	\warning	you can only use this safely with permanent quads!
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				void			RemoveFXQuad(udword i);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Renders all quads.
		 *	\param		rd			[in] renderer
		 *	\param		global_time	[in] current global time. Use default param for permanent (non-fading) quads.
		 *	\param		fade_length	[in] length of fade for all quads
		 *	\param		color		[in] vertex color for all quads
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				bool			Render(Renderer* rd, float global_time=0.0f, float fade_length=0.0f, udword color=0xffffffff);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Sorts all quads.
		 *	\param		dir			[in] sorting axis
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				void			Sort(const Point& dir);

		// Handle with care
				FXQuad*			GetFXQuad(udword i);
		private:
				AxisSortHelper	mAxisSortHelper;
				udword			mVertexOffset;
				VertexBuffer*	mVB;
		// 
				FXQuadHandleManager	mQHM;

		// Internal methods
				void			Release();
	};

#endif	// ICEBILLBOARDMANAGER_H
