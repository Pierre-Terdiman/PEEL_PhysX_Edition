///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains code for a MAX-like virtual trackball.
 *	\file		IceVirtualTrackball.h
 *	\author		Pierre Terdiman
 *	\date		September, 1, 2002
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef ICEVIRTUALTRACKBALL_H
#define ICEVIRTUALTRACKBALL_H

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Implements a virtual trackball.
	 *	
	 *	\param		q		[out] rotation arc quaternion, to combine to object's current rotation
	 *	\param		cop		[in] camera's position in world space
	 *	\param		cor		[in] center of rotation = object's position in world space
	 *	\param		dir1	[in] previous world ray from the mouse
	 *	\param		dir2	[in] current world ray from the mouse
	 *	\param		radius	[in] object's bounding sphere's radius
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICERENDERER_API void VirtualTrackBall(Quat& q, const Point& cop, const Point& cor, const Point& dir1, const Point& dir2, float radius);

#endif // ICEVIRTUALTRACKBALL_H
