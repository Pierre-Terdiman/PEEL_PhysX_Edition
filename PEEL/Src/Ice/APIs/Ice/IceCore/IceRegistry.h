///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains all registry-related code.
 *	\file		IceRegistry.h
 *	\author		Pierre Terdiman
 *	\date		May, 8, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef ICEREGISTRY_H
#define ICEREGISTRY_H

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Saves a 32-bit value to registry.
	 *	\fn			Save(const char* app_name, const char* folder, const char* param_name, udword param)
	 *	\param		app_name	[in] application's name, used to prevent name clash
	 *	\param		folder		[in] a folder in the registry hierarchy, child of app_name
	 *	\param		param_name	[in] name of the parameter, child of folder in the registry hierarchy
	 *	\param		param		[in] parameter value to be saved
	 *	\return		true if success
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICECORE_API bool	Save(const char* app_name, const char* folder, const char* param_name, udword param);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Saves a string to registry.
	 *	\fn			Save(const char* app_name, const char* folder, const char* param_name, const String& param)
	 *	\param		app_name	[in] application's name, used to prevent name clash
	 *	\param		folder		[in] a folder in the registry hierarchy, child of app_name
	 *	\param		param_name	[in] name of the parameter, child of folder in the registry hierarchy
	 *	\param		param		[in] parameter value to be saved
	 *	\return		true if success
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICECORE_API bool	Save(const char* app_name, const char* folder, const char* param_name, const String& param);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Saves a binary block to registry.
	 *	\fn			Save(const char* app_name, const char* folder, const char* param_name, const void* param, udword size)
	 *	\param		app_name	[in] application's name, used to prevent name clash
	 *	\param		folder		[in] a folder in the registry hierarchy, child of app_name
	 *	\param		param_name	[in] name of the parameter, child of folder in the registry hierarchy
	 *	\param		param		[in] address of binary block to be saved
	 *	\param		size		[in] number of bytes to be saved (must be <1024)
	 *	\return		true if success
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICECORE_API bool	Save(const char* app_name, const char* folder, const char* param_name, const void* param, udword size);


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Loads a 32-bit value from registry.
	 *	\fn			Load(const char* app_name, const char* folder, const char* param_name, udword& param)
	 *	\param		app_name	[in] application's name, used to prevent name clash
	 *	\param		folder		[in] a folder in the registry hierarchy, child of app_name
	 *	\param		param_name	[in] name of the parameter, child of folder in the registry hierarchy
	 *	\param		param		[in] parameter value to be loaded
	 *	\return		true if success
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICECORE_API bool	Load(const char* app_name, const char* folder, const char* param_name, udword& param);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Loads a string from registry.
	 *	\fn			Load(const char* app_name, const char* folder, const char* param_name, String& param)
	 *	\param		app_name	[in] application's name, used to prevent name clash
	 *	\param		folder		[in] a folder in the registry hierarchy, child of app_name
	 *	\param		param_name	[in] name of the parameter, child of folder in the registry hierarchy
	 *	\param		param		[in] parameter value to be loaded
	 *	\return		true if success
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICECORE_API bool	Load(const char* app_name, const char* folder, const char* param_name, String& param);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Loads a binary block from registry.
	 *	\fn			Load(const char* app_name, const char* folder, const char* param_name, void* param, udword& size)
	 *	\param		app_name	[in] application's name, used to prevent name clash
	 *	\param		folder		[in] a folder in the registry hierarchy, child of app_name
	 *	\param		param_name	[in] name of the parameter, child of folder in the registry hierarchy
	 *	\param		param		[out] address of binary block to be loaded
	 *	\param		size		[in/out] number of bytes to be loaded (must be <1024)
	 *	\return		true if success
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICECORE_API bool	Load(const char* app_name, const char* folder, const char* param_name, void* param, udword& size);


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Adds a filename to a list of most recently used files. This list is automatically saved to registry and managed by the framework.
	 *	\fn			AddToRecentFiles(const char* filename)
	 *	\param		filename	[in] name of the file to be added
	 *	\param		app_name	[in] application's name, or null to use default name ("Flexine")
	 *	\return		true if success
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICECORE_API bool	AddToRecentFiles(const char* filename, const char* app_name=null);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Gets the list of most recently used files. The list is sorted (more recent files come first).
	 *	\fn			GetRecentFiles(SymbolicStrList& list)
	 *	\param		list		[out] list of most recently used files
	 *	\param		app_name	[in] application's name, or null to use default name ("Flexine")
	 *	\return		number of files in the list
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ICECORE_API udword	GetRecentFiles(SymbolicStrList& list, const char* app_name=null);

#endif // ICEREGISTRY_H
