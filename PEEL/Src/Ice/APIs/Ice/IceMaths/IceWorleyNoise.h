///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Cellular noise.
 *	\file		IceWorleyNoise.h
 *	\author		Pierre Terdiman
 *	\date		January, 29, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef ICEWORLEYNOISE_H
#define ICEWORLEYNOISE_H

	#define PERMUT_SIZE		256

	class ICEMATHS_API WorleyNoise : public Allocateable
	{
		public:
								WorleyNoise();
								~WorleyNoise();

				const float*	Compute(const Point& vector)	const;

		protected:
		mutable	float			mMinDist[4];	// Results

				udword*			mP;				// Permutation table
		mutable	udword			mRnd;			// Random seed

				void			ComputeMinDist(udword i, udword j, udword k, const Point& vector)	const;
		inline_	udword			Random()	const	{ mRnd = mRnd * 2147001325 + 715136305; return mRnd; }
	};

#endif // ICEWORLEYNOISE_H
