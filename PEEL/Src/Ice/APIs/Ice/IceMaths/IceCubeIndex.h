///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains code for cube indices.
 *	\file		IceCubeIndex.h
 *	\author		Pierre Terdiman
 *	\date		June, 26, 2001
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef ICECUBEINDEX_H
#define ICECUBEINDEX_H

	enum CubeIndex
	{
		CUBE_RIGHT,
		CUBE_LEFT,
		CUBE_TOP,
		CUBE_BOTTOM,
		CUBE_FRONT,
		CUBE_BACK,

		CUBE_FORCE_DWORD	= 0x7fffffff
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Gets the face normal from a cube index.
	 *	\fn			GetCubeNormal(CubeIndex id)
	 *	\param		id	[in] cube's face index
	 *	\return		cube's face normal
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FUNCTION ICEMATHS_API const Point*	GetCubeNormal(CubeIndex id);
	FUNCTION ICEMATHS_API const Point*	GetCubeExtent0(CubeIndex id);
	FUNCTION ICEMATHS_API const Point*	GetCubeExtent1(CubeIndex id);

	FUNCTION ICEMATHS_API udword GetCubeColor(CubeIndex id);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Cubemap lookup function.
	 *
	 *	To transform returned uvs into mapping coordinates :
	 *	u += 1.0f;	u *= 0.5f;
	 *	v += 1.0f;	v *= 0.5f;
	 *
	 *	\fn			CubemapLookup(const Point& direction, float& u, float& v)
	 *	\param		direction	[in] a direction vector
	 *	\param		u			[out] impact coordinate on the unit cube, in [-1,1]
	 *	\param		v			[out] impact coordinate on the unit cube, in [-1,1]
	 *	\return		cubemap texture index
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FUNCTION ICEMATHS_API CubeIndex		CubemapLookup(const Point& direction, float& u, float& v);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Computes the impact point on a unit cube, from the origin, in a given direction.
	 *
	 *	\fn			ComputeUnitCubeImpact(Point& hit, const Point& direction)
	 *	\param		hit			[out] impact point
	 *	\param		direction	[in] a direction vector
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FUNCTION ICEMATHS_API void			ComputeUnitCubeImpact(Point& hit, const Point& direction);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 *	Transforms UVs from [-1,1] to [0,1]
	 *	\fn		UnitToUVs(float& u, float& v)
	 *	\param	u	[in/out] mapping coordinate
	 *	\param	v	[in/out] mapping coordinate
	 */
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline_ void UnitToUVs(float& u, float& v)
	{
		u += 1.0f;	u *= 0.5f;
		v += 1.0f;	v *= 0.5f;
	}

	inline_ udword ComputeCubemapOffset(const Point& dir, udword subdiv)
	{
		float u,v;
		const CubeIndex CI = CubemapLookup(dir, u, v);

		// Remap to [0, subdiv[
		const float Coeff = 0.5f * float(subdiv-1);
		u += 1.0f;	u *= Coeff;
		v += 1.0f;	v *= Coeff;

		// Compute offset
		return udword(CI)*(subdiv*subdiv) + udword(u)*subdiv + udword(v);
	}

	inline_ udword ComputeCubemapNearestOffset(const Point& dir, udword subdiv)
	{
		float u,v;
		const CubeIndex CI = CubemapLookup(dir, u, v);

		// Remap to [0, subdiv[
		const float Coeff = 0.5f * float(subdiv-1);
		u += 1.0f;	u *= Coeff;
		v += 1.0f;	v *= Coeff;

		// Round to nearest
		udword ui = udword(u);
		udword vi = udword(v);
		const float du = u - float(ui);
		const float dv = v - float(vi);
		if(du>0.5f)	ui++;
		if(dv>0.5f)	vi++;

		// Compute offset
		return udword(CI)*(subdiv*subdiv) + ui*subdiv + vi;
	}

#endif // ICECUBEINDEX_H
