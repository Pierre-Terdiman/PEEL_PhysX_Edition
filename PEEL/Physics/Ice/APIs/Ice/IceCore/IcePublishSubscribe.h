///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains code for the publish-subscribe design pattern (a.k.a. dispatcher, decoupler, etc)
 *	\file		IcePublishSubscribe.h
 *	\author		Pierre Terdiman
 *	\date		September, 15, 2001
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef ICEPUBLISHSUBSCRIBE_H
#define ICEPUBLISHSUBSCRIBE_H

	class ICECORE_API IceEvent : public SmartContainer
	{
						DECLARE_ICE_CLASS(IceEvent, SmartContainer);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Returns number of subsribers
		 *	\return		number of subscribers
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		inline_			udword				GetNbSubscribers()		const	{	return GetNbCells();	}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Subscribes a given object to the event. The object is first validated before registration.
		 *	\param		object		[in] object interested in the event
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		inline_			bool				Subscribe(Cell* object)			{	return Add(object);		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Subscribes a given object to the event, if it's not already done.
		 *	\param		object		[in] object interested in the event
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						bool				SubscribeUnique(Cell* object);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Unsubscribes a given object from the event.
		 *	\param		object		[in] object to unsubscribe
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		inline_			bool				Unsubscribe(Cell* object)		{	return Remove(object);	}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/**
		 *	Publishes the event, i.e. notifies all subscribers.
		 *	\param		user_data	[in] user-defined and event-dependent data
		 *	\return		true if success
		 */
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual			bool				Publish(udword user_data=0)		= 0;
	};

#endif // ICEPUBLISHSUBSCRIBE_H
